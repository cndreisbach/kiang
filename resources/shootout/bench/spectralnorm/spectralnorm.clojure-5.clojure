;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/
;;
;; contributed by Jesse Rosenstock
;; modified by Jim Kannampuzha

(ns spectralnorm
  (:gen-class))

(set! *warn-on-reflection* true)

(def chunks (atom ()))

(def num-threads (.availableProcessors (Runtime/getRuntime)))
(def workers (vec (repeatedly num-threads #(agent ()))))

(defn eval-a [ii jj]
  (let [i (int ii)
        j (int jj)
        n (unchecked-add i j)
        n+1 (unchecked-inc n)]
     (/ (double 1.0)
        (unchecked-add (bit-shift-right (unchecked-multiply n n+1) (int 1))
                       (unchecked-inc i)))))

(defn multiply-a-v [agent
                    ^doubles v
                    ^doubles av
                    chunk]
  (doseq [i chunk]
    (aset av i (double (areduce v j sum (double 0) 
                                (+ sum (* (double (eval-a i j)) (aget v j))))))))

(defn multiply-at-v [agent
                     ^doubles v
                     ^doubles atv
                     chunk]
  (doseq [i chunk]
    (aset atv i (double (areduce v j sum (double 0) 
                                 (+ sum (* (double (eval-a j i)) (aget v j))))))))

(defn multiply-at-a-v [^doubles v
                       ^doubles tmp
                       ^doubles at-av]
  (dotimes [i num-threads]
    (send (nth workers i) multiply-a-v v tmp (nth @chunks i)))
  (apply await workers)
  (dotimes [i num-threads]
    (send (nth workers i) multiply-at-v tmp at-av (nth @chunks i)))
  (apply await workers))


(defn dot-product [^doubles u ^doubles v]
  (areduce u i sum (double 0) (+ sum (* (aget u i) (aget v i)))))

(defn run-game [size]
  (reset! chunks (map int-array 
                      (partition-all (Math/ceil (double (/ size num-threads))) 
                                     (range size))))
   (let [u (double-array size 1.0)
        tmp (double-array size 0.0)
        v (double-array size 0.0)]
    (dotimes [_ 10]
      (multiply-at-a-v u tmp v)
      (multiply-at-a-v v tmp u))
    (let [vbv (dot-product u v)
          vv (dot-product v v)]
      (Math/sqrt (/ vbv vv)))))

(defn -main [& args]
  (let [n (if (empty? args)
            2500
            (Integer/valueOf ^String (first args)))]
    (println (format "%.9f" (run-game n)))
    (shutdown-agents)))

